name: CI

on:
  - push
  - pull_request

env:
  WEECHAT_RELAY_DEPENDENCIES: asciidoctor cmake debhelper devscripts libcpputest-dev libgnutls28-dev lcov libreadline-dev libzstd-dev pkg-config zlib1g-dev

jobs:

  tests_linux:

    strategy:
      matrix:
        os:
          - ubuntu-22.04
        config:
          - { name: "gcc", cc: "gcc", cxx: "g++", cmake_options: "" }
          - { name: "gcc_coverage", cc: "gcc", cxx: "g++", cmake_options: "-DCODE_COVERAGE=ON" }
          - { name: "clang", cc: "clang", cxx: "clang++", cmake_options: "" }

    name: "Tests: ${{ matrix.config.name }} on ${{ matrix.os }}"
    runs-on: ${{ matrix.os }}

    steps:

      - uses: actions/checkout@v2

      - name: Install dependencies
        run: |
          sudo apt-get update -qq
          sudo apt-get --yes --no-install-recommends install ${{ env.WEECHAT_RELAY_DEPENDENCIES }}

      - name: Build
        env:
          CC: ${{ matrix.config.cc }}
          CXX: ${{ matrix.config.cxx }}
          CMAKE_OPTIONS: ${{ matrix.config.cmake_options }}
        run: |
          mkdir build-tmp
          cd build-tmp
          cmake -DBUILD_DOC=ON -DBUILD_MAN=ON -DBUILD_TESTS=ON ${CMAKE_OPTIONS} ..
          make VERBOSE=1 -j$(nproc)
          sudo make install

      - name: Run tests
        run: |
          cd build-tmp
          ctest -V

      - name: Run command-line interface
        run: |
          weechat-relay-cli --version
          weechat-relay-cli --help
          weechat-relay-cli --license

      - name: Code coverage
        if: ${{ matrix.config.name == 'gcc_coverage' }}
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        run: |
          cd build-tmp
          lcov --directory . --capture --output-file coverage.info
          lcov --remove coverage.info '/usr/*' --output-file coverage.info
          lcov --list coverage.info
          bash <(curl -s https://codecov.io/bash) -f coverage.info || echo 'Codecov error'

  tests_macos:

    strategy:
      matrix:
        os:
          - macos-12
          - macos-11
        config:
          - { name: "gcc", cc: "gcc", cxx: "g++", cmake_options: "" }
          - { name: "clang", cc: "clang", cxx: "clang++", cmake_options: "" }

    name: "Tests: ${{ matrix.config.name }} on ${{ matrix.os }}"
    runs-on: ${{ matrix.os }}

    steps:

      - uses: actions/checkout@v2

      - name: Install dependencies
        run: |
          brew update
          brew install asciidoctor cpputest

      - name: Build
        env:
          CC: ${{ matrix.config.cc }}
          CXX: ${{ matrix.config.cxx }}
          CMAKE_OPTIONS: ${{ matrix.config.cmake_options }}
        run: |
          mkdir build-tmp
          cd build-tmp
          cmake .. -DBUILD_DOC=ON -DBUILD_MAN=ON -DBUILD_TESTS=ON ${CMAKE_OPTIONS}
          make VERBOSE=1 -j$(nproc)
          sudo make install

      - name: Run tests
        run: |
          cd build-tmp
          ctest -V

      - name: Run command-line interface
        run: |
          weechat-relay-cli --version
          weechat-relay-cli --help
          weechat-relay-cli --license

  build_debian:

    strategy:
      matrix:
        os:
          - ubuntu-22.04

    name: "Build Debian on ${{ matrix.os }}"
    runs-on: ${{ matrix.os }}

    steps:

      - uses: actions/checkout@v2

      - name: Install dependencies
        run: |
          sudo apt-get update -qq
          sudo apt-get --yes --no-install-recommends install ${{ env.WEECHAT_RELAY_DEPENDENCIES }}

      - name: Test Debian patches
        run: ./tools/build-debian.sh test-patches

      - name: Build Debian packages
        run: ./tools/build-debian.sh devel ubuntu/jammy

      - name: Install Debian packages
        run: sudo dpkg -i ../*weechatrelay*.deb

      - name: Run command-line interface
        run: |
          weechat-relay-cli --version
          weechat-relay-cli --help
